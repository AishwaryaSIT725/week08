name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'sit722aks08001'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'sit722-week08'
      aks_acr_name:        # kept only for UI; not used anymore
        description: 'Name of ACR'
        required: true
        default: 'sit722acr08001'

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group "${{ inputs.aks_resource_group }}" \
            --name "${{ inputs.aks_cluster_name }}" \
            --overwrite-existing

      # ‚ùå Attach ACR step removed (we use imagePullSecrets & acr-auth secret)

      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-db.yaml

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml
          kubectl rollout status deploy/product-service-w08e1 --timeout=180s
          kubectl rollout status deploy/order-service-w08e1   --timeout=180s

      - name: Wait for Backend LoadBalancer IPs
        run: |
          for i in $(seq 1 60); do
            PRODUCT_IP=$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get svc order-service-w08e1   -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            echo "Try $i: PRODUCT_IP=${PRODUCT_IP:-<pending>}  ORDER_IP=${ORDER_IP:-<pending>}"
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
              echo "ORDER_IP=$ORDER_IP"     >> $GITHUB_ENV
              break
            fi
            sleep 5
          done
          test -n "$PRODUCT_IP" && test -n "$ORDER_IP"

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Show Services
        run: kubectl get svc

      - name: Logout from Azure
        if: always()
        run: az logout
